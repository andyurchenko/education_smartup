<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="edu.dao.repository.TripRepository">

    <resultMap id = "tripMap" type = "Trip">
        <id property = "id" column = "trip_id"/>
        <result property = "start" column = "trip_start"/>
        <result property = "duration" column = "trip_duration" javaType="java.time.Duration" jdbcType="TIME" typeHandler="DurationTypeHandler"/>
        <result property = "price" column = "trip_price"/>
        <result property = "approved" column = "trip_approved"/>
        <result property = "fromStation.id" column = "from_station_id"/>
        <result property = "fromStation.name" column = "from_station_name"/>
        <result property = "toStation.id" column = "to_station_id"/>
        <result property = "toStation.name" column = "to_station_name"/>
        <association property="schedule" javaType="Schedule">
            <result property="fromDate" column="schedule_from_date"/>
            <result property="toDate" column="schedule_to_date"/>
            <result property="period" column="schedule_period"/>
        </association>
        <association property="bus" javaType="Bus">
            <id property="id" column="bus_id"/>
            <result property="brandName" column="bus_brand_name"/>
            <result property="placeCount" column="bus_place_count"/>
        </association>
        <collection property="tripDates" javaType="ArrayList" ofType="TripDate">
            <id property="id" column="trip_date_id"/>
            <result property="date" column="trip_date"/>
            <result property="freePassengerSeatsCounter" column="free_seats_counter"/>
            <association property="trip" resultMap="tripMap"/>
        </collection>
    </resultMap>

    <resultMap id = "scheduleMap" type = "Schedule">
        <result property = "fromDate" column = "from_date"/>
        <result property = "toDate" column = "to_date"/>
        <result property = "period" column = "period"/>
    </resultMap>

    <select id="selectTripById" parameterType="map" resultMap="tripMap" >
        SELECT
            `trip`.`id` AS `trip_id`, `trip`.`start` AS `trip_start`, `trip`.`duration` AS `trip_duration`,
            `trip`.`price` AS `trip_price`, `trip`.`approved` AS `trip_approved`,
            `trip`.`from_station_id`, `trip`.`to_station_id`,

            `bus`.`id` AS `bus_id`, `bus`.`brand_name` AS `bus_brand_name`, `bus`.`place_count` AS `bus_place_count`,

            (SELECT `name` FROM `station` WHERE `station`.`id` = `from_station_id`) AS `from_station_name`,
            (SELECT `name` FROM `station` WHERE `station`.`id` = `to_station_id`) AS `to_station_name`,

            `trip_date`.`date` AS `trip_date`, `trip_date`.`id` AS `trip_date_id`,

            `trip_date_free_seats_counter`.`free_seats_counter`,

            `trip_schedule`.`from_date` AS `schedule_from_date`,`trip_schedule`.`to_date` AS `schedule_to_date`, `trip_schedule`.`period` AS `schedule_period`
        FROM
            `trip`
            INNER JOIN `bus` ON `trip`.`bus_id` = `bus`.`id`
            INNER JOIN `trip_date` ON `trip`.`id` = `trip_date`.`trip_id`
            INNER JOIN `trip_date_free_seats_counter` ON `trip_date`.`id` = `trip_date_free_seats_counter`.`trip_date_id`
            INNER JOIN `trip_schedule` ON `trip`.`id` = `trip_schedule`.`trip_id`
        WHERE
            `trip`.`id` = #{TRIP_ID}
    </select>



    <select id="selectTripsByParams" parameterType="map" resultMap="tripMap" >
        SELECT
            `trip_id`, `trip_start`, `trip_duration`, `trip_price`, `trip_approved`,
            `from_station_id`, `from_station_name`, `to_station_id`, `to_station_name`,
            `bus_id`, `bus_brand_name`, `bus_place_count`,
            `trip_date`,
            `schedule_from_date`, `schedule_to_date`, `schedule_period`
        FROM (
            SELECT
                `trip`.`id` AS `trip_id`,
                `trip`.`start` AS `trip_start`,
                `trip`.`duration` AS `trip_duration`,
                `trip`.`price` AS `trip_price`,
                `trip`.`approved` AS `trip_approved`,
                `trip`.`from_station_id`,
                `trip`.`to_station_id`,
                `bus`.`id` AS `bus_id`,
                `bus`.`brand_name` AS `bus_brand_name`,
                `bus`.`place_count` AS `bus_place_count`,
                (SELECT `name` FROM `station` WHERE `station`.`id` = `from_station_id`) AS `from_station_name`,
                (SELECT `name` FROM `station` WHERE `station`.`id` = `to_station_id`) AS `to_station_name`,
                `trip_date`.`date` AS `trip_date`, `trip_date`.`id` AS `trip_date_id`,
                `trip_schedule`.`from_date` AS `schedule_from_date`,`trip_schedule`.`to_date` AS `schedule_to_date`, `trip_schedule`.`period` AS `schedule_period`
            FROM
                `trip`
                INNER JOIN `bus` ON `trip`.`bus_id` = `bus`.`id`
                INNER JOIN `trip_date` ON `trip`.`id` = `trip_date`.`trip_id`
                INNER JOIN `trip_schedule` ON `trip`.`id` = `trip_schedule`.`trip_id`
            ) AS `inner_query`
        <where>
            <if test="SEARCH_PARAMS.busName != null">
                AND `inner_query`.`bus_brand_name` = #{SEARCH_PARAMS.busName}
            </if>
            <if test="SEARCH_PARAMS.fromStation != null">
                AND `inner_query`.`from_station_name` = #{SEARCH_PARAMS.fromStation}
            </if>
            <if test="SEARCH_PARAMS.toStation != null">
                AND `inner_query`.`to_station_name` = #{SEARCH_PARAMS.toStation}
            </if>
            <if test="SEARCH_PARAMS.fromDate != null">
                AND `trip_date` >= #{SEARCH_PARAMS.fromDate}
            </if>
<!--            <if test="SEARCH_PARAMS.fromDate != null">-->
<!--                AND `trip_id` IN (SELECT `trip_id` FROM `trip_date` GROUP BY `trip_id` HAVING  MIN(`date`) = #{SEARCH_PARAMS.fromDate})-->
<!--            </if>-->
<!--            <if test="SEARCH_PARAMS.fromDate != null">-->
<!--                AND `trip_id` IN (SELECT DISTINCT `trip_id` FROM `trip_date` WHERE `date` = #{SEARCH_PARAMS.fromDate})-->
<!--            </if>-->
<!--            <if test="SEARCH_PARAMS.toDate != null">-->
<!--                AND `trip_id` IN (SELECT `trip_id` FROM `trip_date` GROUP BY `trip_id` HAVING  MAX(`date`) = #{SEARCH_PARAMS.toDate})-->
<!--            </if>-->
<!--            <if test="SEARCH_PARAMS.toDate != null">-->
<!--                AND `trip_id` IN (SELECT DISTINCT `trip_id` FROM `trip_date` WHERE `date` = #{SEARCH_PARAMS.toDate})-->
<!--            </if>-->
            <if test="SEARCH_PARAMS.toDate != null">
                <![CDATA[
                    AND `trip_date` <= #{SEARCH_PARAMS.toDate}
                ]]>
            </if>
            <if test='SEARCH_PARAMS.approved != null and SEARCH_PARAMS.approved.equals("yes")'>
                AND `trip_approved` = TRUE
            </if>
        </where>
    </select>

    <select id="selectTripScheduleByTripId" resultMap="scheduleMap" parameterType="map">
        SELECT
            `from_date`, `to_date`, `period`
        FROM
            `trip_schedule`
        WHERE
            `trip_id` = #{TRIP_ID}
    </select>

    <select id="selectTripDatesByTripId" resultType="java.time.LocalDate" parameterType="map">
        SELECT
            `date`
        FROM
            `trip_date`
        WHERE
            `trip_id` = #{TRIP_ID}
    </select>

    <insert id="insertTrip" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
            trip(`bus_id`, `from_station_id`, `to_station_id`, `start`, `duration`, `price`)
        VALUES (
            #{TRIP.bus.id},
            #{TRIP.fromStation.id},
            #{TRIP.toStation.id},
            #{TRIP.start},
            #{TRIP.duration},
            #{TRIP.price}
        )
    </insert>

    <insert id="insertTripSchedule" parameterType="map">
        INSERT INTO
            `trip_schedule`(`trip_id`,  `from_date`, `to_date`, `period`)
        VALUES
            (#{TRIP_ID}, #{SCHEDULE.fromDate}, #{SCHEDULE.toDate}, #{SCHEDULE.period});
    </insert>

    <insert id="insertTripDates" parameterType="map" useGeneratedKeys="true" keyProperty="list.id">
        INSERT INTO `trip_date`(`trip_id`, `date`) VALUES
        <foreach item="dateFromList" collection="list" separator=",">
            (#{TRIP_ID}, #{dateFromList.date})
        </foreach>
    </insert>

    <delete id="deleteTripById">
        DELETE FROM
            `trip`
        WHERE
            `id` = #{TRIP_ID}
    </delete>

    <delete id="deleteTripDatesByTripId">
        DELETE FROM
            `trip_date`
        WHERE
            `trip_id` = #{TRIP_ID}
    </delete>

    <delete id="deleteTripScheduleByTripId">
        DELETE FROM
            `trip_schedule`
        WHERE
            `trip_id` = #{TRIP_ID}
    </delete>

    <update id="updateTrip" parameterType="map">
        UPDATE
            `trip`
        SET
            `bus_id` = #{TRIP.bus.id},
            `from_station_id` = #{TRIP.fromStation.id},
            `to_station_id` = #{TRIP.toStation.id},
            `start` = #{TRIP.start},
            `duration` = #{TRIP.duration},
            `price` = #{TRIP.price}
        WHERE
            `trip`.`id` = #{TRIP.id}
    </update>

    <update id="updateTripSetApproved" parameterType="map">
        UPDATE
            `trip`
        SET
            `approved` = #{APPROVED_VALUE}
        WHERE
            `trip`.`id` = #{TRIP_ID}
    </update>

</mapper>